{"./":{"url":"./","title":"Introduction","keywords":"","body":"Web 前端架构师课 - 作业打卡 浅层学习看输入，深入学习看输出 汇总所有同学的：学习打卡，作业，学习笔记，分享 精选文章 【双越老师】我如何理解 Web 前端架构师 的角色和职责 查看其他同学的作业和笔记 页面左侧目录，就是所有同学的作业和学习笔记。 提交你的作业和笔记 注意，以下操作需要你了解 github 的 fork 和 pull request 机制。这也是多人协作开发所必备的技能。 fork 源码 进入 https://github.com/imooc-lego/students-learn-task ，fork 项目到自己的 github 空间。 然后下载项目到本地，安装并启动。 cd students-learn-task npm i npm run dev # 访问 localhost:4000 写博客 作业、笔记，都可以用博客的形式。注意，全程使用 markdown 语法，不懂的自己去查。 新建 docs/pages/ ， 即你在慕课网的用户名（或昵称、网名，都可以） 新建 docs/pages//README.md ，内容参考现有的 docs/pages/双越老师/README.md 在 docs/pages/ 下新建博客文件，命名格式按照 01-xxx.md 02-yyy.md 03-zzz.md ... 一定以序号 01- 02- 开头！！ 如果需要图片，可把图片文件放在 docs/images 中，然后在博客中引入 删掉 docs/SUMMARY.md 你在本地执行 npm run dev 或 npm run build 都会自动生成 docs/SUMMARY.md 。 检查一下，如果你的代码中有 docs/SUMMARY.md 这个文件，请删除掉它。\\ 否则，可能会和别人产生冲突，请一定注意检查！！！ 最后，提交代码到 github 。 提交 pull request 从你 fork 的仓库，提交 pull request 到 https://github.com/imooc-lego/students-learn-task ，请求合并到 main 分支 确定 https://github.com/imooc-lego/students-learn-task 有你提交的 pull request 去课程群里通知管理员，管理员会合并 pull request （除非你提交了违规内容） 自动发布 pull request 被合并之后，会触发 github actions ，自动打包、发布到 https://imooc-lego.github.io 。 过程大概 3-5 分钟。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/clqyfe/":{"url":"pages/clqyfe/","title":"Clqyfe","keywords":"","body":"灿烂千阳FE - 课程打卡作业笔记 Week01 需求分析和整体架构设计 Week01-作业-整体架构设计 V1.0 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/clqyfe/01-Week01-作业.html":{"url":"pages/clqyfe/01-Week01-作业.html","title":"Week01 作业","keywords":"","body":"整体架构设计 V1.0 需求 需求文档 慕课乐高体验地址 模块设计 模块拆分: B端和编辑器（前端，后端） H5（ssr） 管理后台（前端，后端） 第三方组件库：为了保证 编辑器和 h5 组件渲染的一致性 自研统计模块：为了满足项目个性化的统计需求 模块的关系图，关键功能及职责： 作品的数据结构 核心数据结构： 组件数据结构尽量复合 VNode 规范 用数组来组织数据，有序 尽量使用引用关系，避免冗余 { // 作品 work: { title: '作品标题', setting: { /* 拓展配置： 如配置渠道 */ }, props: { /* 页面 body 的一些设置，如背景色 */ }, components: [ { id: 'xxx', // 每个组件都有 id ，不重复 name: '文本1', tag: 'text', attrs: { fontSize: '20px' }, children: [ '文本1' // 文本内容，有时候放在 children ，有时候放在 attrs 或者 props ，没有标准，看实际情况来确定 ] }, { id: 'yyy', name: '图片1', tag: 'image', attrs: { src: 'xxx.png', width: '100px' }, children: null }, ] }, // 画布当前选中的组件 activeComponentId: 'xxx' } 数据流转关系图： B端将创建好的作品存入数据库；C端从数据库中读取创建的作品，渲染页面；管理后台可以管控作品的显示。 扩展性保证 数据结构层面 页面级别的配置参数，如全局样式配置 项目级别的配置参数，如提供分渠道统计的参数配置项 编辑器层面 组件的扩展性，如组件隐藏，锁定及图层操作 开发提效 脚手架 提供模板创建 CI/CD 组件平台 组件库的创建，发布和预览 运维保障（待补充） 线上服务和运维服务 安全 监控和报警 服务扩展性：流量大 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/coderzlh/":{"url":"pages/coderzlh/","title":"Coderzlh","keywords":"","body":"coderzlh - 学习分享 第一周笔记 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/coderzlh/01-week01-note.html":{"url":"pages/coderzlh/01-week01-note.html","title":"Week01 Note","keywords":"","body":"第一周笔记 体验地址: 慕课乐高 项目架构 使用技术栈 架构设计做什么 如何做 架构师的核心价值 : 通过技术手段保证技术增长,对业务精准理解 需求指导设计,设计指导开发 技术永远是为业务服务的,技术是实现业务增长的工具 整体分析时不需要注意细节 判断可行性,需要适当调研 考虑复杂度,不过度设计 脱离业务的设计就是耍流氓 需求即业务,无业务不架构 需求闭环 业务闭环 前段开发流程 需求关系图 技术方案设计文档 模块设计 h5端: 提供作品展示与分享的功能 编辑器前端: 提供作品编辑 制作与发布功能 编辑器服务端: 支持编辑器前端的功能 并将作品持久化到数据库 后台管理前端: 供管理员使用 用于管理作品与模板 快速下线违规作品 查看运营统计数据 后台管理服务端: 为后台管理提供接口服务 组件库: 为h5与编辑器端提供组件服务 并可以通过脚手架工具快速创建和发布组件 自研统计: 用于统计自定义事件的pv uv等指标 三方服务: 短信服务: 用于注册 登陆以及密码找回等操作需要验证用户身份时使用 oss文件存储: 存储静态文件 埋点统计: 用于统计pv uv等常见运营指标 微信sdk: 用于微信分享 便于传播 核心数据结构 每个组件尽量符合vnode规范 使用数据来组织数据 有序 尽量使用引用关系 不要冗余 { work:{ id:'xxx', title:'标题', props:{/*全局配置属性*/}, settings:{/*拓展预留*/}, components:[ { id:'xxxx', name:'文本1', tag:'text', attrs:{color:red}, children:[] } ] }, //当前被选中的组件id activeComponentId:'xx' } 拓展性 增加动画,音效 甚至简单的交互功能 批量选中与批量修改 多人协作 同时编辑 研发提效 脚手架: 创建发布 组件平台 运维保障 线上服务和运维服务 安全 监控与告警 服务拓展性: 基于云服务,可以随时拓展机器和配置 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/六个周/":{"url":"pages/六个周/","title":"六个周","keywords":"","body":"学生-六个周-简介 2021年的全年学习目标，就围绕着这门课程展开了。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/🍀ricky94/":{"url":"pages/🍀ricky94/","title":"🍀Ricky94","keywords":"","body":"Ricky94 - 学习笔记 第一周：需求分析和架构设计：做什么，如何做？ Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/🍀ricky94/01-第一周.html":{"url":"pages/🍀ricky94/01-第一周.html","title":"第一周","keywords":"","body":"第一周：需求分析和架构设计：做什么，如何做？ 需求设计 架构脱离不了业务。要做好架构必须要深入理解需求、参与需求、看透需求背后的业务本质。 PV（Page View）：即页面浏览量或点击量，用户每一次对网站中的每个网页访问均被记录一个PV。用户对同一个页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。 UV（Unique Visitor）：是指通过互联网访问、浏览这个网页的自然人。一天内同一个访客多次访问仅计算一个UV。 自定义事件：通过代码埋点，对用户行为进行追踪，完成对用户行为细节的记录。 架构设计 分析需求，确定需要创建的项目 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/🐈点点/01-需求分析和架构设计.html":{"url":"pages/🐈点点/01-需求分析和架构设计.html","title":"需求分析和架构设计","keywords":"","body":"需求分析 熟悉产品需求 以架构师的思维分析需求，不能只停留在表面实现需求，要考虑怎么实现能给业务带来增长 全局思维、整体思维、闭环思维，不能只考虑自己，要全局考虑整个团队，要做到有输出、有输入、有结果 浅层需求 分析表面需要实现的功能，如登录、创建作品、编辑、发布、访问作品等 深度需求 通过浅层需求分析，进一步分析需求 作品的管理 作品统计 作品发布 h5 后台管理 以上需求还有很多细节点，就不一一阐述 需求分析总览图 架构设计 需要的项目 独立业务组件库 编辑器画布使用的组件和渲染逻辑和h5完全一致，为了两边一致，应该抽离出来提供给它们使用，从而保证制作的时候和渲染出来的h5保持一致 自研统计服务 考虑自研服务前，先列出我们统计所需的功能 我们需要实现分渠道统计这个需求，要实现这个需求，我们就需要自定义事件统计 支持自定义事件统计 支持Open API 经过调研后，我们发现，市面上第三方服务要么不支持，要么收费很贵，综合对比，只能选择自研一个 包括： 日志收集 日志分析 Open API 各个项目之间关系 作品数据结构设计 思路： 每个组件尽量符合vnode规范 用数组来组织数据，有序 尽量使用引用关系，不要冗余 vuex store { work: { title: '作品标题', setting: {/* 一些可能的配置项，用不到就先预留 */}, props: {/* 页面body的一些设置，如背景色 */}, components: [ // components要用数组，有序结构 // 单个node要符合常见的vnode格式 { id: 'xxx', // 每个组件都有id，不重复 name: '文本1', tag: 'text', attrs: { fontSize: '20px' }, children: [ '文本1' // 文本内容，有时候放在children，有时候放在attrs或者props，没有标准，看实际情况来确定 ] }, { id: 'yyy', name: '图片1', tag: 'image', attrs: { src: 'xxx.png', width: '100px' }, children: null } ] } } vuex getter // 图层 { layers: (state) => { state.work.components.map(c => { return { id: c.id, name: c.name } }) } } 扩展性保证 扩展组件 扩展编辑器功能、如锁定、隐藏 扩展页面信息，如增加多语言 扩展其他功能，如大数据分析和计算等 研发效率 脚手架：创建发布 组件平台 运维保障 线上服务和运维服务 安全 监控和报警 服务扩展性： 基于云服务，可以随时扩展机器和配置 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🎓EditYJ/":{"url":"pages/👨‍🎓EditYJ/","title":"👨‍🎓EditYJ","keywords":"","body":"EditYJ - 课程打卡作业心得 Week01 Week01-作业-整体架构设计 V1.0 Week02 Week02-笔记-脚手架是什么 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🎓EditYJ/01-Week01-作业.html":{"url":"pages/👨‍🎓EditYJ/01-Week01-作业.html","title":"Week01 作业","keywords":"","body":"整体架构设计 V1.0 范围 整体设计，架构设计，没有细节 模块设计 模块关系图 B端是前后端分离开发，受众不是大众所以不采用SSR模式开发，如果H5的编辑器比较复杂，可以拆分成单独项目进行开发。 C端采用的是SSR模式开发，一个原因是性能的考虑，另一个方面受众人数较多。 组件库独立出来作为一个第三方项目，B端的编辑器和C端共用一个组件库进行H5页面的渲染。所见即所得，B端编辑好页面后，C端也可以复用组件库进行渲染，达到视觉统一，降低开发成本。 管理后台采用前后端分离开发，内部人员使用，主要用来进行B端和C端的数据管理，数据统计，可以让运营人员把控产品的全局。 自研统计服务，统计一些自定义事件，供B端和使用后台管理系统的人员知道产品的走向。 自研统计服务主要是因为市面上支持自定义事件的统计服务大而全，而且价格昂贵，我们只需要有选择的开发一些满足自生需求的统计就行。 核心数据结构 单个组件应该使用vnode规范，使用业界统一规范有助于我们少踩一些坑，并能得到扩展性较强的组件结构。vuex store 的大概结构如下： { // 作品 work: { title: '作品标题', setting: { /* 一些可能的配置项，用不到就先预留 */ }, props: { /* 页面 body 的一些设置，如背景色 */ }, components: [ // components 要用数组，有序结构 // 单个 node 要符合常见的 vnode 格式 { id: 'xxx', // 每个组件都有 id ，不重复 name: '文本1', tag: 'text', attrs: { fontSize: '20px' }, children: [ '文本1' // 文本内容，有时候放在 children ，有时候放在 attrs 或者 props ，没有标准，看实际情况来确定 ] }, { id: 'yyy', name: '图片1', tag: 'image', attrs: { src: 'xxx.png', width: '100px' }, children: null }, ] }, // 画布当前选中的组件 activeComponentId: 'xxx' } 数据流转关系图 使用统一的数据库管理数据，B端产生组件的配置数据存入数据库并发布项目，C端读取组件配置数据渲染出H5页面供用户访问，管理后台通过管理数据库的数据达到控制B端和C端的目的。 扩展性保证 数据结构层面 一些可能的整体项目级别配置项。主要是是否可编辑，是否锁定等等。 一些页面级别的配置参数，大小，背景色之类的。 编辑器层面 保证组件的可扩展性，组件的锁定，可选，图层等等后续必要的扩展功能。 开发提效 脚手架固化一些重复操作，规范流程，提高开发效率。 创建项目的流程 提交代码的流程 测试项目的流程 打包项目的流程 发布项目的流程 组件平台主要固化组件的开发和发布流程，提升组件开发效率。 运维保障（待补充） 线上服务和运维服务 安全 监控和报警 服务扩展性：流量大 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🎓EditYJ/02-Week02-笔记-脚手架是什么.html":{"url":"pages/👨‍🎓EditYJ/02-Week02-笔记-脚手架是什么.html","title":"Week02 笔记 脚手架是什么","keywords":"","body":"脚手架是什么 核心目标 提升前端研发效能 将研发过程自动化，标准化，数据化。 本质 脚手架的本质是一个操作系统的客户端，通过命令执行。 执行命令通常由主命令、command、option三部分组成，即：主命令 command [command param] [option] [option param] 简单的执行过程 以vue cli为例子，输入vue后的执行的大概过程如下： 输入主命令后，首先会去从环境变量中寻找vue命令的路径 根据找到的vue命令链接到实际的vue.js 利用node执行vue.js 通过vue.js解析用户数据的后续参数 执行用户指令 开发脚手架的简单过程 以vue cli为例： 开发一个包含bin/vue.js目录的npm项目，发布在npm上 安装此项目到node的lib/node_modules下 指定node bin 目录下的vue连接至开发的vue.js 回答三个问题 为什么全局安装@vue/cli后会添加命令为vue? 答：因为安装后会自动在node的bin目录下建立vue软链接文件, 这个软链接文件指向了node/lib/node_modules/@vue对应vue.js，由于node/bin目录是在环境变量下的，所以等于添加了命令vue。 全局安装@vue/cli后发生了什么? 答：执行过程如下： 下载了vue.js命令解析执行文件到node/lib/node_modules下 在node/bin目录下创建vue软链接文件连接到node/lib/node_modules对应vue.js 执行vue命令时发生了什么？为什么vue指向一个js文件我们却可以通过vue命令去执行它? 答：第一个问题参考上面的 简单的执行过程，通过下面的vue软链接文件的内容我们可以知道第二个问题的答案： #!/bin/sh basedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\") case `uname` in *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;; esac if [ -x \"$basedir/node\" ]; then \"$basedir/node\" \"$basedir/node_modules/@vue/cli/bin/vue.js\" \"$@\" ret=$? else node \"$basedir/node_modules/@vue/cli/bin/vue.js\" \"$@\" ret=$? fi exit $ret 通过这个文件的内容我们可以清晰的看到，本质上其实就是利用shell命令执行了node vue.js Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫Sam老师/":{"url":"pages/👨‍🏫Sam老师/","title":"👨‍🏫Sam老师","keywords":"","body":"Sam 老师 - 课程分享 请直接看下级目录 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫Sam老师/01-前端未来趋势分析.html":{"url":"pages/👨‍🏫Sam老师/01-前端未来趋势分析.html","title":"前端未来趋势分析","keywords":"","body":"前端未来趋势分析 前端未来趋势是一个非常大的命题，它错综复杂，涉猎广泛，今天我试图从前端工程师的视角来分析行业未来的发展趋势，这与我们每个前端工程师都息息相关。 趋势一：融合 基本判断：前端与其他领域结合更加紧密，前端领域分工将更加精细 在技术融合的趋势下，前端将不断与其他领域进行融合，开发出各种令人惊叹的应用： 前端+算法：算法将大大提升前端效能，大家可以参考imgcook，这是一个由淘宝团队推出的根据设计稿自动生成前端代码的工具，相信在不远的未来根据设计稿直接生成业务代码不是梦！ 前端+后端：在Node.js+express/koa2/egg.js等一系列后端框架的驱动下，前端和后端结合越来越紧密，从最早的前后端分离，到Serverless、GraphGL，在可预见的未来，前端工程师将包揽所有业务逻辑，并且通过Serverless技术快速生产API，独立完成整个业务系统的研发、发布和运维，所以一手流利的服务端代码能力是必备技能。 前端+架构：前端架构师是未来发展的主流趋势，每个具有一定规模的前端团队都需要合格的前端架构师，前端架构师将完成团队基础架构和工具链设计和开发，并为团队或公司设计和规划业务架构，为公司创造海量业务价值。 趋势二：中台 基本判断：前端中台系统将迅速崛起和壮大 前端工程化的快速普及催生了前端中台的快速发展，一线互联网大厂前端中台发展速度极快，不管是面向营销的h5搭建系统，还是Native动态定制，又或是复杂的中后台可视化搭建平台，可谓百花齐放、应有尽有，前端中台已然成为前端发展的重要方向之一，未来将有大量前端工程师专门从事中台开发，中台开发的核心是前端架构师，他需要负责复杂的中台系统架构、研发效能监控和提升，这是一个极具挑战的工作，但大势所趋，中台的时代已经到来。 趋势三：跨端 基本判断：跨端技术的迅速发展催生新型研发模式 曾几何时，App和Web是完全不同的两个领域，但h5、小程序的火爆，加上javascript日趋成熟，各种跨端技术如雨后春笋，从构建时到运行时，跨端技术正大踏步地前行，面对跨端技术，前端工程师必须拥抱。而跨端技术的背后是高水准前端架构师的精巧构思，掌握跨端技术，合理选择技术栈，是前端工程师的必修课。 总结 要跟紧时代，与时俱进，那么就一定要保持开放的思维，不断吸收新的知识，不断迭代旧的思想，不断拓宽能力边界。前端的发展势头汹涌而又壮阔，每一名前端工程师都有可能成为弄潮儿，这是前端的黄金时代，也是我们每一名前端工程师的黄金时代。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫Sam老师/02-博客2.html":{"url":"pages/👨‍🏫Sam老师/02-博客2.html","title":"博客2","keywords":"","body":"为什么要学习前端架构 无处不在 首先架构无处不在，架构的本质是解决业务快速增长中的技术复杂度问题，所以只要你所在的组织业务存在增长，就需要用架构的思想去解决一些问题，比如： 项目代码量越来越大，如何提升项目的构建性能？ 如何抽取项目公共模块进行快速复用？ 如果你没有架构思维和相对应的技术能力，面对这些问题的时候是无从下手的。所以学习架构的第一目标是为了应对和解决项目开发中碰到的各类问题，通常需要架构层面去解决的问题包括： 工程问题 复杂业务 复用问题 至关重要 其次架构至关重要，2009年node诞生以后，前端工程化得到飞速发展，前端项目量级和研发效率直线上升，目前前端领域已出现进一步细分的趋势，主要有三个方向： 前端业务开发 前端全栈开发（偏服务端node） 前端基础架构开发（偏工具） 而前端架构师可能是这三个岗位中的任意一个： 偏业务的前端架构师主要解决复杂业务问题 偏服务端的前端架构师主要解决服务架构和运维体系问题 偏基础架构的前端架构师主要解决研发体系和效能的问题 所以不管你当前处于哪个岗位、哪个阶段，前端架构对你而言都有价值、都非常重要。 直通高薪 最后架构直通高薪，通过调研不难发现很多中级以上的前端开发岗位中已经对架构能力有需求，包括组件库研发、性能优化、工具开发等等，而高级前端职位中，前端架构能力几乎是绝对和必须的，随着前端技术的飞速发展，薪资基于已经与服务端旗鼓相当，所以掌握架构能力毫无疑问是快速进阶高薪的法宝。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫双越老师/":{"url":"pages/👨‍🏫双越老师/","title":"👨‍🏫双越老师","keywords":"","body":"双越老师 - 课程分享 请直接看下级目录 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫双越老师/01-我如何理解Web前端架构师的角色和职责.html":{"url":"pages/👨‍🏫双越老师/01-我如何理解Web前端架构师的角色和职责.html","title":"我如何理解Web前端架构师的角色和职责","keywords":"","body":"我如何理解 Web 前端架构师 的角色和职责 架构师的核心指责：保证业务增长 —— 《聊聊架构》 架构师这个角色，在行业中和各个公司中，都没有明确的定位。甚至，有些公司都没有架构师这个职位。 但是，你的身边总是需要这样的角色。他们技术能力好，有深度、有广度，熟悉公司产品的业务需求，熟悉公司各个部门和负责人，遇到问题能拆分任务，计划和跟踪 …… 即，他们不仅仅是做开发，还有其他更加重要的工作。有了这个角色，你就有了依靠，你就会感觉很踏实，很放心。这种角色，就是架构师。 特别是近些年技术栈细分严重，大家各司其职，更加需要这样的角色去整合团队的工作。保证多人协作顺利有效的进行，否则就乱套了。 无论是大公司还是创业公司，只要有了研发团队，不是单兵作战或者小作坊（通讯靠吼），就需要这样的角色。 下面，我根据我的工作经验和理解，说一下 Web 前端架构师这个角色的一些职责。虽然没法给出一个文字定义，但可以从不同的方面来表达一下。 负责人 首先，作为 Web 前端架构师，你就是前端及相关技术方面的负责人。只要跟你相关的，你都要负责，赢了给你奖励，输了你也要得到惩罚。 所以，架构师就是“将”。所谓“千军易得一将难求”，招聘人员很简单，但招聘一个架构师是很难的。一般情况，都是从本公司培养。 三国时 “蜀国无大将廖化作先锋”，蜀国此时也不是没人了，只是没将了。 这个项目或者系统，交给一个架构师（再配一些开发人员）老板就会安心，一切都在掌控之中，不会发生惊喜，但也不会有意外。 高效 有节奏 稳定 安全 高效：发挥每个人的最大价值，不让人闲着。但这并不代表要加班，要 996 —— 反而加班 996 就是因为没有高效而导致的。 有节奏：当下有安排，未来有计划，做完一个任务立马安排下一个任务，持续进行中。 稳定：完善的研发流程（单元测试，接口测试），完善的监控报警体系，才能保证稳定，课程中都会讲到。 安全：不会被轻易攻击，如最常见的 DDOS XSS SQL 注入等。 PS：如何做到以上几点，以及如何让老板放心，这都是有方法论的。具体哪些方法，大家可以参考我们的课程。 深入理解业务 脱离业务的架构，就是耍流氓，架构是基于业务的 —— 要再说：不想做业务，想做架构。 架构师的核心职责是保证业务增长，翻译过来就是：如何用技术只支撑现在和未来的业务。所以，你得非常清楚的了解公司产品的业务，未来规划和目标。 所以，建议各位同学，如果现在的工作机会还不错，一定要积极参与到公司产品业务的讨论中，不要只是一门心思的写代码。 技术是为业务服务的，光靠技术，没有持久的竞争力。 个人技术能力 架构师也要写代码，且要有广度和深度。 广度：做技术方案时，要有多种选择，且能熟悉前后端的关系。 深度：要能解决一些别人搞不定的问题，不一定是亲自解决，可以指导从某个方向入手查询。 总结 无论公司有没有架构师的职位，无论你现在是否还在一线开发。 只要是作为开发人员，你都要学会以架构师的思维去思考问题，这样才能保证持久竞争力。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫双越老师/02-Web 前端架构师课 vs 普通实战课.html":{"url":"pages/👨‍🏫双越老师/02-Web 前端架构师课 vs 普通实战课.html","title":"Web 前端架构师课 Vs 普通实战课","keywords":"","body":"Web 前端架构师课 vs 普通实战课 我们要做一门不一样的课，要能体现出“架构师”这个主题，要和普通的实战课做出明显的区别。 在课程制作过程中，我们三位讲师经常自我提问：我们这门课和实战课有何区别呢？—— 我们必须要说服自己，否则就自欺欺人了。 最终，我们总结出了以下几点，证明我们这门课和实战课确实完全不一样。 真正的线上项目，不是 demo 有一次和七月老师打电话，我们聊了一个多小时，我们都承认，现在的实战课，都是 demo ，远远达不到生产环境的级别要求。 线上项目和 demo 虽然功能看似一样，但实则完全不同。随随便便就能说出很多方面： demo 没有线上环境，如域名，服务器，数据库等 demo 没有上线、回滚的流程 demo 没有运维监控和报警，这些在实际工作中都是重点 demo 没有统计、分享等正式的业务场景 demo 不用考虑安全、攻击、敏感内容过滤等 demo 不用担心万一半夜出 bug 该怎么办？ …… 还有很多，一次性说不完，都在课程里 【注意】并不是说课程中讲到了上述知识点，它就是线上项目了。光讲知识点没用，必须得把项目正式上线，用正式的域名、证书、服务器等跑起来，而且要流程闭环才可以。 业务负责度高，流程闭环 脱离了业务谈架构，就是耍流氓。做架构师课，就得用复杂度高的业务，否则体现不出来。 h5 编辑器，是前端领域中一个非常复杂的业务，这跟“社区” “电商”这种实战课项目，不是一个难度级别。 全栈，流程闭环：创建 h5 ，发布，分享，还有统计，这是闭环的，实战课里是没有这样做的。实战课讲的，都是完整流程的一个环节而已。 不讲业务代码，不讲基础知识 业务代码会演示，但不会在一行一行带着写了。基础知识也不再详细讲，如 vue3 ts 语法等。 实战课基本都 20h 左右，而且要详细演示代码，根本做不出来这么复杂的项目。 我看过其他的号称架构师的课，虽然时间很长，但是大部分都用在讲基础知识上，做的项目也远远达不到这个复杂度。 有些课程会讲框架源码、造轮子，这看似很牛 x ，但其实这些仅仅是架构师的一个能力“个人技术深度”，对于架构师整体的技能，这是很小的一个方面，算不了什么。 更关注设计、研发流程、运维 这些远比开发重要，特别是运维。 如何开发，大部分业务代码，大家学实战课就好了，这些没多少难度。 而设计、流程和运维，这些是实战课不常见的，也是架构师最需要了解的内容 —— 否则，大家都会开发，凭什么你是架构师呢？ 总结 实战课能带你从 0 到 1 入门，接下来 1 - 2 就需要架构师课来帮助你突破瓶颈。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫双越老师/03-动真格的了！为做一门课程花费 1.5万 购买云服务.html":{"url":"pages/👨‍🏫双越老师/03-动真格的了！为做一门课程花费 1.5万 购买云服务.html","title":"动真格的了！为做一门课程花费 1.5万 购买云服务","keywords":"","body":"动真格的了！为做一门课程花费 1.5万 购买云服务.md 最贵的 iPhone12 Pro Max 要 11899 元，我没有买。今年新出的 iPad mini 据说玩游戏体验很好，要 2921 元，我也没有买。 我把这些钱都花在了正在制作的课程上，1.5w 购买了各种云服务：两台云服务器、各种数据库、OSS、CDN、域名、https 证书、Web 防火墙、短信服务、内容审核服务…… 哦，还花钱请了以为 UI 设计师来设计页面。 你可能会疑问：就讲一门课而已吗，还需要花钱？现在网上各种“Vue 做电商”，就写代码就好了，一分钱都不用花。 对此，我也有一个疑问：现在有哪一门课程，讲师会亲自花钱来投资？（平台的广告、运营费用不能算哈～） 你可以说我：不按套路出牌，可能会踩坑～ 但我还是要坚持自己的风格和态度：输出优质内容，独立思考，做不一样的事情，做真正有价值的课程！ PS：课程链接这里不写了，有意向的可以私聊我。本文我们只谈钱～ 为何要花钱呢？ 书归正传。不开玩笑、不卖关子了，正式解释一下这个问题。 其实答案很简单 —— 我要做一个真实的线上项目，而不是 demo 。这是项目地址 https://www.imooc-lego.com/ ，有兴趣的可以体验，这里不过多介绍。【但是】要解释一下，虽然看着就是一个网站，但它背后有 12 个代码仓库，所以复杂度还是很高的。 我要把一个真实项目的从 0 到 1 的过程，搬到课程里。包括需求、架构设计、技术方案、研发流程、CI/CD ，发布上线/回滚，运维，监控和报警。 我在这最近忙碌的半年多里，我都傻傻分不清自己到底是一名讲师，还是一名外包。 讲课为何非得用真实项目，不都是 demo 吗？ 这个问题要分开说。 入门适合用 demo 零基础入门的课程，为了让学员能更快的学习到语言、环境、框架和工具的使用，就在本地运行，用 demo 非常合适。 此时如果强行用线上环境，第一会扰乱学员的学习重点，第二是难度太大学员不易接受。 近几年是国内在线编程教育的高速发展阶段，但也是刚刚起步不久（回想 5 年之前，哪儿有那么多付费课程）。 正好近几年又是程序员行业发展壮大的关键时间，新人纷纷涌入。 所以，这段时间出现了大量的入门课程，各个平台，各个讲师，各个框架，各种“vue + 电商”的课程铺天盖地。以至于学员写简历，都写这些项目，面试官们应该有点印象。 在此，也就解答了本文一开始的问题“就讲一门课而已吗，还需要花钱？” —— 这是和我们大环境相关的。 进阶不再适合 demo 为啥进阶还要学习课程？而且花钱更多？—— 你上班的时候看看你身边的人，就知道了。 一块和你挤地铁的有多少人？一块和你堵车的有多少人？你上午占个厕所的坑位有多不容易？—— 就是因为人多，竞争激烈，不进则退呀！ 我家人经常劝告我：别那么累了，慢着点干，你现在这么忙每月挣 xxx 钱，你歇着干每月挣个 70% 不也挺好的吗？ 我说：这和你想的不一样，我现在这么干，每月挣 xxx ，我要稍微一懈怠，别说 70% 60% ，我一分钱都挣不到。因为大家都是一个集体，不再是自己种那一亩三分地了，你歇着干就会影响其他人，你就会被淘汰。大家想一下是不是这个道理？ 好了，把话题拉回来。 所以，进阶的课程，我觉得不应该再用 demo ，要把标准提高，要能输出更有竞争力的内容。demo 和线上项目，哪个更有竞争力，这一点大家都知道。 真实项目有啥特别的，看功能和我做的 demo 一样啊？ 举个例子。demo 就是实验室里的概念车，线上项目就是大街上跑的量产车。看着功能都一样，但本质有很大区别的。 加入要把这个概念车卖给你，你敢买吗？万一坏了零部件怎么办，有地方换吗？4S 店是否也有 10w 公里的质保？它作出碰撞测试吗，安全吗？它内饰做过甲醛等气体测试吗？它排量标准符合国家规定吗？它有出厂检测和 3C 证书吗？…… 同理，对于我们软件项目，demo 和线上项目也是有本质区别的。 demo 没有线上环境，如域名，服务器，数据库等 demo 没有上线、回滚的流程 demo 没有运维监控和报警，这些在实际工作中都是重点 demo 没有统计、分享等正式的业务场景 demo 不用考虑安全、攻击、敏感内容过滤等 demo 不用担心万一半夜出 bug 该怎么办？ …… 还有很多，一次性说不完，都在课程里 上述这些，对于一个网站或者任何一个软件产品，是不是都非常重要？相信大家都懂得。但是这些都要借助线上项目，来讲出来，否则就是空口白说。 为啥很少见其他课程也用线上项目？ 成本高啊，而且收益如何都还不知道呢～ 首先得像我，花钱买各种服务。而且现在服务器都不便宜，看看阿里云服务器，一年动辄 3k+ 。有人说可以买华为云、腾讯云 —— 是便宜，但做课程吗，还是要考虑找个大众的，这样容易理解。 再者，多了上线、回滚、运维、监控和报警、网络安全预防，这么多内容，自己的时间成本会增加很多。 但是，我还是做了这样的尝试，不试试怎么知道不行呢。 这些钱给报销吗？ &#x1F62D;很明显，不给报销。 发票都还没开呢，哪位需要的话，可以私信我。 现在各个平台，都没有给讲师报销服务器花费的机制。因为现在我没发现哪门课是在做一个正式的线上项目。PS：也或许有，只是我没发现。 即便是所谓的线上项目，最常见的形式，也就是平台给免费提供一个测试机，然后给一个二级甚至三级域名，能给学员演示一下。 毫不客气的说，全都是 demo 。 未来编程教育方向，之我见 第三次科技革命还在进行中，所有涉及的行业，都会越来越多元化、精细化。编程教育也是一样，各个技术栈，入门教程、进阶教程都会越来越精细。 而且，随着行业的发展，初期红利期结束，淘汰掉很多凑热闹的。课程会越来越贴合实际应用，越来越以产出实际价值为主，无论是入门的还是进阶的，学的就是工作中要用的到，有价值的东西。 基于以上两点，我还是坚信自己走的方向是正确的。 如果反馈不如预期的好，那可能是时机未到。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫张轩老师/":{"url":"pages/👨‍🏫张轩老师/","title":"👨‍🏫张轩老师","keywords":"","body":"张轩老师 - 课程分享 请直接看下级目录 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫张轩老师/01-在学习了一门技术的基础知识后，怎样持续提升这门技术达到更高水平？.html":{"url":"pages/👨‍🏫张轩老师/01-在学习了一门技术的基础知识后，怎样持续提升这门技术达到更高水平？.html","title":"在学习了一门技术的基础知识后，怎样持续提升这门技术达到更高水平？","keywords":"","body":"在学习了一门技术的基础知识后，怎样持续提升这门技术达到更高水平？ 因为很多同学学习技术陷于一个瓶颈，尤其是很多在中小型公司的同学，发现工作中每天都深陷重复业务的泥潭，不由的产生一种恐慌的心情，觉得自己在浪费时间没有提高。很多同学都向我要求的复杂前端项目和高级课程。 什么是复杂项目 那么什么是复杂项目呢？一个陈年老项目有10w+代码 ？ 一个增删改查项目有 50 个分开的页面算复杂吗？虽然它的代码量够大，但是它更不称不上复杂。反而会让人很有挫败感和无力感。 我认为想真正尝试复杂的项目的必须要是一个现代的前端开发项目，涉猎多个不同领域： 交互的复杂性 - 可能包含元素的复杂交互 移动，拖动大小，拖动排序 等。 数据状态的复杂性 - 嵌套数据和多种类型的组件相对应，同时两者要互相同步。 多项目之间的依赖性 - 有可能要抽取出一系列的公共库供多个项目使用。 测试 - 保证代码质量，减少 Bug 的必备技能。 打包 - 对应不同类型的功能的项目（web 应用或者是 library），怎样生成多种类型对应的可复用的代码格式。 性能优化 - 大型项目性能是要点，让加载速度提升就等于省的是真金白银。 第三方库使用和二次开发 - 怎样快速找到和使用已经有的技术方案解决特定问题。 持续集成 - 让代码能够自动化的测试，部署，是去大厂的敲门砖。也是大型项目必备的内容。 ... 只有满足了这样需求的项目才能把前端开发的方方面面都包含在其中，才能掌握其中的复杂项目的奥义。 写出高质量符合大厂要求的代码 除了项目，代码质量也是一块需要考量的因素。 很多人都知道大厂镀金是个对于每个人的职业都是重要的一环，但是很多在中小心公司的同学都不熟悉大厂开发的流程和要求，有的人甚至经常是公司的“全干工程师”，从前端到后端都是一个人说了算。大厂由于工程师众多，必须采取一套标准化自动高效的流程来管理代码和部署以及测试。 简单可以描述为： 从 git flow 分支的创建，管理已经合并 到 lint 工具保证代码的格式正确 到 单元测试 尽可能保证代码的质量 到 代码提交 尽可能详尽可追溯的提交信息， 到 PR review，再次保证代码的质量 到最后 CI/CD ，保证持续迭代和部署等等。 这些概念如果你觉得陌生，一两句话很难说的清楚，那么就需要通过一个大型多人协作的项目去真是的实践这些过程。软件开发肯定会伴随着 Bug 的出现，关键是怎样使用科学和优良的实践来尽可能的发现和规避风险。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫张轩老师/02-Typescript 是不是前端开发必备的技能？一个 ts 黑到 ts 粉的心路历程.html":{"url":"pages/👨‍🏫张轩老师/02-Typescript 是不是前端开发必备的技能？一个 ts 黑到 ts 粉的心路历程.html","title":"Typescript 是不是前端开发必备的技能？一个 Ts 黑到 Ts 粉的心路历程","keywords":"","body":"Typescript 是不是前端开发必备的技能？一个 ts 黑到 ts 粉的心路历程 2020年 Typescript 各种火，就像我之前说的在 jsconf 2019上，typescript 也变成了一个主要议题，占到了很大比重，来自微软的讲师韩骏还拿出了这么一张图，来表达自己的观点， 我觉得这个不是夸大其词，而实实在在的是一个趋势，来自 2018 年 stateofjs 权威调查显示，80% 的程序员都希望在新的项目中学习和使用 typescript。大家可以明显看到从 2016 年到 2018年 这个趋势的绝大变化，这就说明 typescript 越来越流行了。 在我的编程生涯到现在，我一直在使用动态类型语言（Dynamically Typed Language），聊起这个概念，那就要说说 动态类型语言 和他的对立面 - 静态类型语言（Statically Typed Language）。我刚写 typescript 的时候，对类型声明嗤之以鼻，添加一大堆类型浪费我宝贵的时间，还时不时遇到根本看不懂的类型错误，感觉很抓狂，我当时想对 ts 编译器说：“老子能管好自己写的类型，不用你报错”，实在搞不定的类型错误发生的时候，我就会使用 any 大法，完全是一副应付差事的用法。 我当时维护的项目是一个十几万行的大型项目，当时还在推另外一个小型项目，我极力反对 typescript，据理力争，“你是想让我赶快完成任务？还是浪费时间在写 any 上面？这玩意儿根本就不能给你避免 Bug，都是扯犊子。” 后来我花更多的时间在老项目上面，我每天写 any 发 PR 被老外一阵喷。这时候可不能给自己丢脸啊，我开始认真对待起 type 来。 我发现当我在代码中打入了越来越多类型的时候，效率居然变得很高（自动补全），遇到各种傻瓜错误（比如说 typo，我的单词记不住，经常打错 ）的几率也越来越少，在后来两年的工作生涯中，我在很多比较大型的项目中都使用了它，并且越来越感受到它的优势。虽然精通 ts 真的有一定的难度，但是其实你也不必那么精通，能差不多看懂，帮你提高效率就好了，我总结几点编码过程中，实实在在帮助到我的点。 1 程序更容易理解 当我们进行编码的时时候，我们非常关心这几个问题，一个函数或者方法接受什么样什么类型的参数，它的返回值和类型是什么？有什么其他外部数据需要被引进？为了解决这几个问题，我们一般都要详细的查阅文档，搞清楚所有的来龙去脉，因为动态语言的约束我们很难完成这几项任务，我们需要在代码真正运行的时候来调试才能知道答案，比如说加断点或者 console.log 去查看输出，甚至还需要社交过程，我有好几次都是直接跑去问同事或者blame原来写这段代码的人，发个邮件问这些代码究竟是干嘛的，扯皮扯个好几天。有了 typescript，这几个问题都迎刃而解，代码就是全部的注释，通过代码你不再需要去进行猜测，而是直接就可以知道这些问题的答案。看下面上古神器 jQuery 的提示，这参数，返回值的说明，还有文档地址和代码示例，这水平比你百度出来不知几百年前的csdn博客文章不知道高到哪里去了。 2 效率更高 有了 IDE 和 compiler 的帮助，你可以非常方便的在不同的代码块和定义之间进行跳转，同时进行代码补全，还有丰富的接口提示，可以是事半功倍。我就享受这个感觉，能让 IDE 炫酷的提示是每个程序员的梦想。可以疯狂的体验下“老夫就是 jQuery 一把梭”的快感。 3 更少的错误 在编译期间能够发现大部分的错误，这远远要比运行时候再出现这些错误要好的多。在 typescript 之前，我不知道有多少次出现变量名称打错这种错误，传入错误类型的参数，还有就是还有就是排在前端错误第一名：最经典的“Cannot read property 'xxx' on undefined：无法在 undefined 上读取 xxx 属性，通常出现在 a.b.c 的情况。” 4 非常好的包容性 typescript 是 javascript 超集，即使我们把 js 文件直接命名为 ts 文件，也不会有任何的问题，兼容第三方库，即使这些库没有用 ts 编写，也可以给他们编写单独的类型文件进行读取。大部分非常流行的库都用 typescript 实现或者提供写好的类型文件供开发者使用，比如 React，vue，angular，和 ant design 等等，使用起来可谓是无缝衔接。 5 提高自身水平 ts 内部有非常多的内置对象，这些对象我们平时在使用的时候都没有过多的在意，比如 NodeList 和 HTMLCollection 的异同，Event 对象，衍生出来的 MouseEvent，TouchEvent 都有啥区别和属性 等等。。。 把这些接口都一一搞清楚以后，对BOM 和 DOM 的机制了解可以达到另外一个境界，潜移默化的就变成了 API 使用高手。当别人看到没用过的属性的时候，你可以骄傲的化身 API 达人。 结论： 假如你工作在一个大中型项目上面，typescript 对你应该是利大于弊。可以学！还能从另外一个方便了解静态类型语言是怎么玩的，看到别人的 Java 代码居然能有看得懂的部分了。 当然要学会根据自己的需求和项目的规模合理选用工具，如果你的应用就是一个简单的展示页面，加几个 UI 状态改变，就没有必要使用。 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫彩笔/":{"url":"pages/👨‍🏫彩笔/","title":"👨‍🏫彩笔","keywords":"","body":"彩笔 - 学习分享 第一周笔记 Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "},"pages/👨‍🏫彩笔/作业-01-架构方案设计文档.html":{"url":"pages/👨‍🏫彩笔/作业-01-架构方案设计文档.html","title":"作业 01 架构方案设计文档","keywords":"","body":"慕课乐高架构方案设计文档 需求 https://www/yuque.com/imooc-lego/zlz87z 范围 根据需求分化出了三个方面的内容：用户端(前台)、企业端(中台)、后台管理(后台) 用户端(前台) 主要用来展示通过编辑器编辑出来的 H5 海报。 由于 移动端 性能上的局限，所以可以考虑使用 SSR H5-server 企业端(中台) 主要提供可产出H5海报模板的功能，以及一系列相关的功能 biz-editor-fe biz-editor-server 后台管理(后台) 主要用来管理 企业端的用户 以及 海报模板 ，掌控全局 admin-fe admin-server 模块设计 如下图所示 其中因为 用户端 和 企业端都会用到 组件库 所以可以独立出一个组件平台。统计服务由于第三方要么是功能不齐全，要么是性价比很低，因此考虑自研一个统计服务。 核心数据结构 { scene: { name: '场景名称', setting: {}, // 扩展性保证 options: {}, // 扩展性保证 }, components: [ { id: '1', name: '组件名1', type: 'text', attr: { w: 50, h: 50, z: 1, }, options: { value: 'xxx' color: 'red', fontSize: 16 }, formatter: { // 扩展性保证 isShow: '', isControl: '', isLook: '' } }, { id: '2', name: '组件名2', type: 'image', attr: { w: 50, h: 50, z: 1, }, options: { src: 'xxx.png', alt: 'xxx' }, formatter: { // 扩展性保证 isShow: '', isControl: '', isLook: '' } } ] } 扩展性保证 保证编辑器未来的扩展性 场景的扩展性 scene: { name: '场景名称', setting: {}, // 扩展性保证 options: {}, // 扩展性保证 } 组件的扩展性 { id: '1', name: '组件名1', type: 'text', attr: { w: 50, h: 50, z: 1, }, options: { value: 'xxx' color: 'red', fontSize: 16 }, formatter: { // 扩展性保证 isShow: '', isControl: '', isLook: '' } }, 开发提效 脚手架组件平台 脚手架 可以开发快速创建 项目 原型的脚手架，来省去配置项目初始化的时间。 可以开发快速发布 项目 上线的脚手架，来省去发布项目的时间 组件平台 搭建业务组件平台，来减少代码的重复率，对业务组件进行抽象，积累业务组件，提升开发效率，减少编写重复代码的时间 运维保障 ... Copyright © imooc-lego (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-25 12:20:54 "}}